{"version":3,"file":"static/js/597.436f1db9.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.jsx","components/Cast/CastList.jsx","components/Cast/Cast.jsx","utils/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Message = styled.p`\n  text-align: center;\n  font-size:  ${props => props.theme.fontSizes.l};\n  font-weight:${props => props.theme.fontWeights.bold};\n`;\n\nexport const ActorsList = styled.ul`\n  list-style: none;\n  display: flex;\n  max-width: 1200px;\n  margin: 0 auto;\n  flex-wrap: wrap\n`;\n\nexport const CastItem = styled.li`\n  text-align: center;\n  margin: ${props => props.theme.space[3]}px;\n  width: 210px;\n`;\n\nexport const CastImage = styled.img`\n  display: block;\n  width: 100%;\n  height: 320px;\n`;\n\nexport const Name = styled.p`\n  margin: ${props => props.theme.space[1]}px;\n`;\n\nexport const Character = styled.p`\n  margin: ${props => props.theme.space[1]}px;\n`;\n","import PropTypes from 'prop-types';\nimport {\n  ActorsList,\n  CastItem,\n  CastImage,\n  Name,\n  Character,\n} from './Cast.styled';\nimport noImage from '../../images/noImage.PNG';\n\nexport const CastList = ({ data }) => (\n  <ActorsList>\n    {data.map(({ cast_id, profile_path, original_name, character }) => (\n      <CastItem key={cast_id}>\n        <CastImage src={profile_path? `https://image.tmdb.org/t/p/w342${profile_path}`: noImage} alt={original_name}/>\n        <Name>{original_name}</Name>\n        <Character>{`Character: ${character}`}</Character>\n      </CastItem>\n    ))}\n  </ActorsList>\n);\n\nCastList.propTypes = {\n  data: PropTypes.array.isRequired,\n};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCast } from '../../utils/api';\nimport { CastList } from './CastList';\nimport { Loader } from '../Loader/Loader';\nimport { Message } from './Cast.styled';\n\n\nconst Cast = () => {\n  const [cast, setCast] = useState(null);\n  const [status, setStatus] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setStatus('pending');\n      \n    getCast(movieId)\n      .then(result => {\n        setCast(result);\n        setStatus('resolved');\n      })\n      .catch(() => setStatus('rejected'));\n  }, [movieId]);\n\n  if (status === 'pending') return <Loader />;\n  if (status === 'rejected') return <Message>Щось пішло не так</Message>;\n  if (status === 'resolved' && cast.length === 0) return <Message>Немає інформаціі</Message>;\n  if (status === 'resolved') return <CastList data={cast} />;\n};\n\nexport default Cast;","import axios from 'axios';\n\nconst KEY = '324a07cbf11f3aed45ef70fac807eb23';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\naxios.defaults.params = {\n  api_key: KEY,\n};\n\nexport async function getPopularMovies(page) {\n  const response = await axios.get('/trending/movie/week', {\n    params: { ...axios.defaults.params, page },\n  })\n  return response.data;\n}\n\nexport async function getMovies(query,page) {\n  const response = await axios.get(`/search/movie?&query=${query}`,{\n    params: { ...axios.defaults.params, query: query, page},\n  });\n  return response.data;\n}\n\nexport async function getMovieDetails(movieId) {\n  const { data } = await axios.get(`/movie/${movieId}`);\n  return data;\n}\n\nexport async function getCast(movieId) {\n  const { data } = await axios.get(`/movie/${movieId}/credits`);\n  return data.cast;\n}\n\nexport async function getReviews(movieId) {\n  const { data } = await axios.get(`/movie/${movieId}/reviews`);\n  return data.results;\n}"],"names":["Message","styled","props","theme","fontSizes","l","fontWeights","bold","ActorsList","CastItem","space","CastImage","Name","Character","CastList","data","map","cast_id","profile_path","original_name","character","src","noImage","alt","useState","cast","setCast","status","setStatus","movieId","useParams","useEffect","getCast","then","result","catch","Loader","length","getPopularMovies","page","axios","params","response","getMovies","query","getMovieDetails","getReviews","results","api_key"],"sourceRoot":""}